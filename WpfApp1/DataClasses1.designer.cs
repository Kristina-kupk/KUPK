#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Atele")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WpfApp1.Properties.Settings.Default.AteleConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id__user;
		
		private string _fio_user;
		
		private string _log_user;
		
		private string _pas_user;
		
		private string _rol_user;
		
		private bool _status_user;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid__userChanging(int value);
    partial void Onid__userChanged();
    partial void Onfio_userChanging(string value);
    partial void Onfio_userChanged();
    partial void Onlog_userChanging(string value);
    partial void Onlog_userChanged();
    partial void Onpas_userChanging(string value);
    partial void Onpas_userChanged();
    partial void Onrol_userChanging(string value);
    partial void Onrol_userChanged();
    partial void Onstatus_userChanging(bool value);
    partial void Onstatus_userChanged();
    #endregion
		
		public Users()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id__user", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id__user
		{
			get
			{
				return this._id__user;
			}
			set
			{
				if ((this._id__user != value))
				{
					this.Onid__userChanging(value);
					this.SendPropertyChanging();
					this._id__user = value;
					this.SendPropertyChanged("id__user");
					this.Onid__userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio_user", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string fio_user
		{
			get
			{
				return this._fio_user;
			}
			set
			{
				if ((this._fio_user != value))
				{
					this.Onfio_userChanging(value);
					this.SendPropertyChanging();
					this._fio_user = value;
					this.SendPropertyChanged("fio_user");
					this.Onfio_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_user", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string log_user
		{
			get
			{
				return this._log_user;
			}
			set
			{
				if ((this._log_user != value))
				{
					this.Onlog_userChanging(value);
					this.SendPropertyChanging();
					this._log_user = value;
					this.SendPropertyChanged("log_user");
					this.Onlog_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pas_user", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string pas_user
		{
			get
			{
				return this._pas_user;
			}
			set
			{
				if ((this._pas_user != value))
				{
					this.Onpas_userChanging(value);
					this.SendPropertyChanging();
					this._pas_user = value;
					this.SendPropertyChanged("pas_user");
					this.Onpas_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rol_user", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string rol_user
		{
			get
			{
				return this._rol_user;
			}
			set
			{
				if ((this._rol_user != value))
				{
					this.Onrol_userChanging(value);
					this.SendPropertyChanging();
					this._rol_user = value;
					this.SendPropertyChanged("rol_user");
					this.Onrol_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_user", DbType="Bit NOT NULL")]
		public bool status_user
		{
			get
			{
				return this._status_user;
			}
			set
			{
				if ((this._status_user != value))
				{
					this.Onstatus_userChanging(value);
					this.SendPropertyChanging();
					this._status_user = value;
					this.SendPropertyChanged("status_user");
					this.Onstatus_userChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
